{"version":3,"sources":["App/logo.svg","App/App.js","serviceWorker.js","Todo/Todo.js","Todo/TodoList.js","Todo/TodoForm.js","index.js"],"names":["module","exports","App","Boolean","window","location","hostname","match","Todo","props","state","items","currentItem","text","key","handleInput","bind","addItem","deleteItem","setUpdate","Component","ListItems","listItems","map","item","class","role","type","id","value","onChange","e","target","icon","faTrash","onClick","TodoForm","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","className","onSubmit","placeholder","TodoList","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,kHCY5BC,MARf,WACE,OACE,6BACE,kDCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDChBeC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAM,GACNC,YAAc,CACVC,KAAK,GACLC,IAAI,KAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBAZF,E,UADWI,a,gBC2BnBC,MAxBf,SAAmBZ,GACf,IACMa,EADQb,EAAME,MACIY,KAAI,SAAAC,GAEpB,OAAO,yBAAKV,IAAKU,EAAKV,KAClB,8BACA,yBAAKW,MAAM,sBAAsBC,KAAK,SACtC,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKV,IAAKe,MAAOL,EAAKX,KAAMiB,SAAU,SAACC,GAC7DtB,EAAMU,UAAUY,EAAEC,OAAOH,MAAML,EAAKV,QAErC,kBAAC,IAAD,CAAiBmB,KAAMC,IAASC,QAAS,WACrC1B,EAAMS,WAAWM,EAAKV,cAQtC,OACI,4BAAKQ,ICpBQc,E,0KACLL,GAERM,KAAKC,SAAS,CACV1B,YAAY,CACRC,KAAMkB,EAAEC,OAAOH,MACff,IAAKyB,KAAKC,W,8BAIdT,GACJA,EAAEU,iBACF,IAAMC,EAAUL,KAAK3B,MAAME,YAE3B,GADA+B,QAAQC,IAAIF,GACQ,KAAjBA,EAAQ7B,KAAY,CACnB,IAAMgC,EAAQ,sBAAOR,KAAK3B,MAAMC,OAAlB,CAAyB+B,IACvCL,KAAKC,SAAS,CACV3B,MAAMkC,EACNjC,YAAY,CACRC,KAAK,GACLC,IAAI,S,iCAKTA,GACP,IAAMgC,EAAeT,KAAK3B,MAAMC,MAAMoC,QAAO,SAAAvB,GAAI,OAC/CA,EAAKV,MAAMA,KACbuB,KAAKC,SAAS,CACZ3B,MAAOmC,M,gCAGHjC,EAAKC,GACX6B,QAAQC,IAAI,SAASP,KAAK3B,MAAMC,OAChC,IAAMA,EAAQ0B,KAAK3B,MAAMC,MACzBA,EAAMY,KAAI,SAAAC,GACLA,EAAKV,MAAMA,IACZ6B,QAAQC,IAAIpB,EAAKV,IAAK,OAAOA,GAC7BU,EAAKX,KAAMA,MAGfwB,KAAKC,SAAS,CACZ3B,MAAOA,M,+BAOT,OACI,yBAAKqC,UAAU,OACf,yCACA,0BAAMpB,GAAG,aAAaqB,SAAUZ,KAAKpB,SACjC,2BAAOU,KAAK,OAAOuB,YAAY,OAAOrB,MAAOQ,KAAK3B,MAAME,YAAYC,KAAMiB,SAAUO,KAAKtB,cACzF,4BAAQY,KAAK,UAAb,QAEJ,kBAACwB,EAAD,CAAUxC,MAAO0B,KAAK3B,MAAMC,MAAOO,WAAYmB,KAAKnB,WAAYC,UAAWkB,KAAKlB,iB,GAxDtDX,GCGtC4C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGFC,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.173bdb9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Simple Todo List</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nexport default class Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items:[],\r\n            currentItem : {\r\n                text:'',\r\n                key:''\r\n            } \r\n        }\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.setUpdate = this.setUpdate.bind(this);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee, faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => \r\n        {\r\n            return <div key={item.key}>\r\n                <span>\r\n                <div class=\"alert alert-primary\" role=\"alert\">\r\n                <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\r\n                 props.setUpdate(e.target.value,item.key)}}/>\r\n                {/* {item.text} -- Delete <FontAwesomeIcon icon={faTrash} onClick={() => { */}\r\n                <FontAwesomeIcon icon={faTrash} onClick={() => {\r\n                    props.deleteItem(item.key)\r\n                }} />\r\n                </div>\r\n                {/* <p>{item.text}</p>\r\n                <p>Delete</p> */}\r\n                </span>\r\n            </div>\r\n    })\r\n    return(\r\n        <h1>{listItems}</h1>\r\n    )\r\n}\r\n\r\nexport default ListItems;\r\n\r\n// export default class TodoList extends Component {\r\n//     render() {\r\n//         return (\r\n//             <div className=\"AppList\">\r\n//                 <h1>Item List</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport TodoList from './TodoList';\r\n// import { Alert } from 'react-bootstrap';\r\n\r\nexport default class TodoForm extends Todo {\r\n    handleInput(e){\r\n        // this.state\r\n        this.setState({\r\n            currentItem:{\r\n                text: e.target.value,\r\n                key: Date.now()\r\n            }\r\n        })\r\n    }\r\n    addItem(e){\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        console.log(newItem);\r\n        if(newItem.text !== \"\"){\r\n            const newItems = [...this.state.items, newItem];\r\n            this.setState({\r\n                items:newItems,\r\n                currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        }\r\n    }\r\n    deleteItem(key){\r\n        const filteredItems= this.state.items.filter(item =>\r\n          item.key!==key);\r\n        this.setState({\r\n          items: filteredItems\r\n        })\r\n    }\r\n    setUpdate(text,key){\r\n        console.log(\"items:\"+this.state.items);\r\n        const items = this.state.items;\r\n        items.map(item=>{      \r\n          if(item.key===key){\r\n            console.log(item.key +\"    \"+key)\r\n            item.text= text;\r\n          }\r\n        })\r\n        this.setState({\r\n          items: items\r\n        })\r\n    }\r\n    // handleInput = this.handleInput.bind(this);\r\n    // addItem = this.addItem.bind(this);\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n            <h1>Todo form</h1>\r\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n                <input type=\"text\" placeholder=\"Text\" value={this.state.currentItem.text} onChange={this.handleInput}/>\r\n                <button type=\"submit\">Add</button>\r\n            </form>\r\n            <TodoList items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App/index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport TodoForm from './Todo/TodoForm';\n// import TodoList from './Todo/TodoList';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <TodoForm />\n    {/* <TodoList /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}